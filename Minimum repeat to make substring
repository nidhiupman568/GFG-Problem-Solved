class Solution {
  public:
    int minRepeats(string& s1, string& s2) {
        int len1 = s1.size();
        int len2 = s2.size();
        
        // Start with an empty repeated version of s1
        string repeated = s1;
        int count = 1;
        
        // Keep appending s1 until the length of repeated string is at least len2
        while (repeated.size() < len2) {
            repeated += s1;
            count++;
        }
        
        // Check if s2 is now a substring of the repeated string
        if (repeated.find(s2) != string::npos) {
            return count;
        }
        
        // Append one more s1 to cover cases where s2 could start in the last segment of repeated
        repeated += s1;
        count++;
        
        // Check again if s2 is a substring
        if (repeated.find(s2) != string::npos) {
            return count;
        }
        
        // If s2 is still not a substring, it can never be one
        return -1;
    }
};
