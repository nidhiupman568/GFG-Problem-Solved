class Solution {
public:
    long long f(int row, int col, int ans, vector<vector<int>>& arr, vector<vector<int>>& vis, vector<vector<vector<long long>>>& memo, int n) {
        if (row == n - 1 && col == n - 1) return (ans == arr[n - 1][n - 1]);
        if (row >= n || col >= n) return 0;
        if (memo[row][col][ans] != -1) return memo[row][col][ans];

        long long up = 0;
        long long left = 0;
        if (vis[row][col] == 0 && ans >= arr[row][col]) {
            vis[row][col] = 1;
            up = f(row + 1, col, ans - arr[row][col], arr, vis, memo, n);
            left = f(row, col + 1, ans - arr[row][col], arr, vis, memo, n);
            vis[row][col] = 0;
        }

        memo[row][col][ans] = up + left;
        return memo[row][col][ans];
    }

    long long numberOfPath(int n, int k, vector<vector<int>>& arr) {
        vector<vector<int>> vis(n, vector<int>(n, 0));
        vector<vector<vector<long long>>> memo(n, vector<vector<long long>>(n, vector<long long>(k + 1, -1))); // memoization table

        return f(0, 0, k, arr, vis, memo, n);
    }
};
