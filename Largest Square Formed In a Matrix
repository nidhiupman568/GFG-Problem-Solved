// User function Template for C++

class Solution{
public:
    int solve(vector<vector<int>>&mat, int i, int j, int &maxi, vector<vector<int>>&dp){
        if(i>= mat.size()|| j>= mat[0].size()){
            return 0;
        }
        
        if(dp[i][j]!=-1) return dp[i][j];
        
        int right = solve(mat, i, j+1, maxi,dp);
        int digonal = solve(mat, i+1, j+1, maxi,dp);
        int down = solve(mat, i+1, j, maxi,dp);
        
        if(mat[i][j]==1){
            dp[i][j] = 1 + min(right, min(digonal,down));
            maxi = max(maxi, dp[i][j]);
            return dp[i][j];
        }
        else return dp[i][j]=0;
        
    }
    int solveTAB(vector<vector<int>>&mat , int row, int col, int &maxi){
        vector<vector<int>>dp(row+1, vector<int>(col+1,0));
        
        for(int i=row-1;i>=0;i--){
            for(int j=col-1;j>=0;j--){
                int right = dp[i][j+1];
                int digonal = dp[i+1][j+1];
                int down = dp[i+1][j];
                
                if(mat[i][j]==1){
                    dp[i][j] = 1 + min(right, min(digonal,down));
                    maxi = max(maxi, dp[i][j]);
                }
                else dp[i][j]=0;
            }
        }
        return dp[0][0];
    }
    int solveSC(vector<vector<int>>&mat , int row, int col, int &maxi){
        vector<int>curr(col+1,0);
        vector<int>next(col+1,0);
        
        for(int i=row-1;i>=0;i--){
            for(int j=col-1;j>=0;j--){
                int right = curr[j+1];
                int digonal = next[j+1];
                int down = next[j];
                
                if(mat[i][j]==1){
                    curr[j] = 1 + min(right, min(digonal,down));
                    maxi = max(maxi, curr[j]);
                }
                else curr[j]=0;
            }
            next=curr;
        }
        return next[0];
    }
    int solveSC2(vector<vector<int>>&mat , int row, int col, int &maxi){
        
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if(i>0 && j>0 && mat[i][j])
                    mat[i][j] = 1 + min(mat[i][j-1], min(mat[i-1][j-1], mat[i-1][j]));
                
                
                maxi = max(maxi,mat[i][j]);
            }
        }
        return maxi;
    }
    
    int maxSquare(int n, int m, vector<vector<int>> &mat){
        // code here
        // vector<vector<int>>dp(n, vector<int>(m,-1));
        // int maxi=0;
        // solve(mat,0,0,maxi,dp);
        // return maxi;
        // int maxi=0;
        // solveTAB(mat, n, m, maxi);
        // return maxi;
        // int maxi=0;
        // solveSC(mat, n,m,maxi);
        // return maxi;
        int maxi=0;
        solveSC2(mat,n,m,maxi);
        return maxi;
    }
};
