// User function template for C++

class Solution {
    
    int findClosestIndex(vector<int>& nums, int target) {
    int left = 0;
      int right = nums.size() - 1;
      
    int minDiffIndex = -1;
    int minDiff = INT_MAX;
    
    while (left <= right) {
        int mid = left + (right - left) / 2;
        
        if (nums[mid] == target) {
          return mid;
        }
        
        int diff = abs(nums[mid] - target);
        if (diff < minDiff || (diff == minDiff && mid > minDiffIndex)) {
            minDiff = diff;
            minDiffIndex = mid;
        }
        
        if (nums[mid] < target) {
            left = mid + 1;
            
        } else if (nums[mid] > target) {
            
            right = mid - 1;
        }
    }
    
    return minDiffIndex;
}

  public:
    vector<int> printKClosest(vector<int> arr, int n, int k, int target) {
       
      
     int idx= findClosestIndex(arr,target);
     
    //  cout<<arr[idx]<<endl;
     
   vector<int>ans;
     
     int i=idx;
     int j=idx;
     
     if(arr[idx]-target==0){
         
         i--;
         j++;
     }
     
if(arr[idx]-target!=0){
        ans.push_back(arr[idx]);
        i--;
        j++;
        k--;
    }
  
     while(i>=0 && j<n && k){
         
        if(abs(arr[i]-target)>abs(arr[j]-target)) {
            ans.push_back(arr[j]);
            j++;
            k--;
        }
         
           else if(abs(arr[i]-target)<abs(arr[j]-target)) {
            ans.push_back(arr[i]);
            i--;
            k--;
        }
     
     else if(abs(arr[i]-target)==abs(arr[j]-target)){
            ans.push_back(arr[j]);
            j++;
            k--;
        }
     }
     
      while(k>0 && j<n){
         ans.push_back(arr[j]);
         k--;
         j++;
     }
     while(k>0 && i>=0){
         ans.push_back(arr[i]);
         k--;
         i--;
     }
     
      
      return ans;
       
    }
};
