class Solution {
  public:
    int wildCard(string pattern, string str) {
        int m = pattern.length();
        int n = str.length();
        
        // Optimize for empty pattern
        if (m == 0) return n == 0;
        
        // Optimize for patterns with only '*'
        bool allStar = true;
        for (char c : pattern) {
            if (c != '*') {
                allStar = false;
                break;
            }
        }
        if (allStar) return 1;
        
        vector<bool> dp(n + 1, false);
        dp[0] = true;
        
        for (int i = 1; i <= m; i++) {
            bool prev = dp[0];
            dp[0] = dp[0] && pattern[i-1] == '*';
            
            for (int j = 1; j <= n; j++) {
                bool temp = dp[j];
                if (pattern[i-1] == '*') {
                    dp[j] = dp[j] || dp[j-1];
                } else if (pattern[i-1] == '?' || pattern[i-1] == str[j-1]) {
                    dp[j] = prev;
                } else {
                    dp[j] = false;
                }
                prev = temp;
            }
        }
        
        return dp[n] ? 1 : 0;
    }
};
