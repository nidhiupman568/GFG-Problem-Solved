class Solution {
private:
    void dfs(vector<vector<int>>& mat, int n, int i, int j, string path, vector<string>& result) {
        if (i < 0 || j < 0 || i >= n || j >= n || mat[i][j] == 0) {
            return;
        }
        
        if (i == n-1 && j == n-1) {
            result.push_back(path);
            return;
        }
        
        mat[i][j] = 0;  // Mark as visited
        
        dfs(mat, n, i+1, j, path + 'D', result);
        dfs(mat, n, i-1, j, path + 'U', result);
        dfs(mat, n, i, j+1, path + 'R', result);
        dfs(mat, n, i, j-1, path + 'L', result);
        
        mat[i][j] = 1;  // Backtrack
    }

public:
    vector<string> findPath(vector<vector<int>> &mat) {
        int n = mat.size();
        vector<string> result;
        
        if (mat[0][0] == 0 || mat[n-1][n-1] == 0) {
            return result;
        }
        
        dfs(mat, n, 0, 0, "", result);
        
        return result;
    }
};
