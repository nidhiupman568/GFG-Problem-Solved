class Solution {
public:
    int minOperations(string str1, string str2) 
    { 
        int m = str1.length();
        int n = str2.length();
        
        // Create a table to store lengths of longest common subsequences
        vector<vector<int>> dp(m + 1, vector<int>(n + 1, 0));
        
        // Build the dp table
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                if (str1[i - 1] == str2[j - 1]) {
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                } else {
                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
                }
            }
        }
        
        // Length of the longest common subsequence
        int lcs_length = dp[m][n];
        
        // Minimum number of deletions and insertions
        int deletions = m - lcs_length;
        int insertions = n - lcs_length;
        
        return deletions + insertions;
    }
};
