class TrieNode {
public:
    int data;
    TrieNode* children[2];
    bool isTerminal;
    
    TrieNode(int x) {
        data = x;
        for(int i=0; i<2; i++) {
            children[i] = NULL;
        }
        isTerminal = false;
    }
};

class Trie {
public:
    TrieNode* root;
    
    Trie() {
        root = new TrieNode(-1);
    }
    
    void insertUtil(TrieNode* root, vector<int>& row, int i) {
        if(i >= row.size()) {
            root -> isTerminal = true;
            return;
        }
        
        TrieNode* child;
        
        if(root -> children[row[i]] != NULL) {
            child = root -> children[row[i]];
        }
        else {
            child = new TrieNode(row[i]);
            root -> children[row[i]] = child;
        }
        
        insertUtil(child, row, i+1);
    }
    
    void insert(vector<int>& row) {
        insertUtil(root, row, 0);
    }
    
    bool searchUtil(TrieNode* root, vector<int>& row, int i) {
        if(i >= row.size()) {
            return root -> isTerminal;
        }
        
        TrieNode* child;
        
        if(root -> children[row[i]] != NULL) {
            child = root -> children[row[i]];
        }
        else {
            return false;
        }
        
        return searchUtil(child, row, i+1);
    }
    
    bool search(vector<int>& row) {
        return searchUtil(root, row, 0);
    }
};

class Solution
{   
    public:
    vector<int> repeatedRows(vector<vector<int>> &matrix, int M, int N) 
    { 
        // Your code here
        vector<int> ans;
        Trie* obj = new Trie();
        
        
        for(int i=0; i<M; i++) {
            if(obj -> search(matrix[i])) {
                ans.push_back(i);
            } else {
                obj -> insert(matrix[i]);
            }
        }
        
        return ans;
    } 
};
