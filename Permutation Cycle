//RCh - Permutation Cycle
#include<bits/stdc++.h>
#define INF LONG_LONG_MAX
#define inf INT_MAX
#define bctz __builtin_ctz
#define bclz __builtin_clz
#define bpt __builtin_popcount
#define pb push_back
#define x first
#define y second

using namespace std;

typedef long long INT;
typedef pair<int, int> pii;
typedef pair<int, pii> pi3;

template <class T> inline void smax(T &a, T b){if(a < b)a = b;}
template <class T> inline void smin(T &a, T b){if(a > b)a = b;}

const int NN = 2e5 + 10;
const int M = 450;
const int mod = 998244353;

int A[NN], B[NN];
int vst[NN], sz[NN], cnt[NN], pos[NN], ans[NN];
vector <int> vec[NN];
int pre[M][NN], suf[M][NN];
pii C[M];
int sum[NN];

void solve_napsack(int flag, int dp[][NN], int mx, int n){
	if(flag) reverse(C + 1, C + n + 1);
	dp[0][0] = 0;
	for(int i = 1; i <= mx; i++) dp[0][i] = inf;
	for(int i = 0; i < n; i++){
		for(int j = 0; j <= mx; j++) dp[i + 1][j] = dp[i][j];
		for(int j = 0; j <= mx; j++) if(dp[i][j] != inf) smin(dp[i + 1][j + C[i + 1].x], dp[i][j] + C[i + 1].y);
	}
	if(flag){
		reverse(C + 1, C + n + 1);
		for(int i = 0; i <= mx; i++)
			for(int j = 0, k = n + 1; j < k; j++, k--) swap(dp[j][i], dp[k][i]);
	}
}

int main(){
#ifndef ONLINE_JUDGE
	freopen("in.in", "r", stdin);
	freopen("out.out", "w", stdout);
#endif
	int t;
	scanf("%d", &t);
	while(t--){
		int n, k;
		scanf("%d%d", &n, &k);
		for(int i = 1; i <= n; i++) scanf("%d", A + i);
		int nn = 0;
		for(int i = 1; i <= n; i++){
			if(vst[i]) continue;
			int p = i;
			nn++;
			while(!vst[p]){
				vec[nn].pb(p);
				vst[p] = 1;
				p = A[p];
			}
			sz[nn] = vec[nn].size();
			for(int u : vec[nn]) B[u] = sz[nn];
		}
		for(int i = 1; i <= nn; i++) cnt[sz[i]]++;
		int m = 0;
		for(int i = 1; i < k; i++){
			int p = 1;
			while(cnt[i] >= p){
				C[++m] = {i * p, p};
				if(p == 1) pos[i] = m;
				cnt[i] -= p;
				p <<= 1;
			}
			if(cnt[i]) C[++m] = {i * cnt[i], cnt[i]};
		}
		solve_napsack(0, pre, k, m);
		solve_napsack(1, suf, k, m);
		for(int i = 1; i < k; i++) ans[i] = inf;
		ans[k] = 0;
		for(int i = k + 1; i <= n; i++) ans[i] = 1;
		for(int i = 1; i <= m; i++){
			int s = C[i].x / C[i].y;
			for(int j = 0; j <= k - s; j++){
				int p = pre[i - 1][k - s - j], q = suf[i + 1][j];
				if(p != inf && q != inf) smin(ans[s], p + q);
			}
		}
		sort(sz + 1, sz + nn + 1);
		reverse(sz + 1, sz + nn + 1);
		for(int i = 1; i <= nn; i++) sum[i] = sum[i - 1] + sz[i];
		for(int i = 1; i <= nn; i++){
			if(sz[i] >= k) continue;
			if(sum[i] >= k) smin(ans[sz[i]], i);
			int id = lower_bound(sum + 1, sum + nn + 1, k - sz[i]) - sum;
			if(id < i) smin(ans[sz[i]], id + 1);
			else{
				id = lower_bound(sum + 1, sum + nn + 1, k) - sum;
				smin(ans[sz[i]], id);
			}
		}
		for(int i = 1; i <= n; i++) printf("%d ", ans[B[i]]);
		printf("\n");
		for(int i = 1; i <= n; i++) vst[i] = cnt[i] = pos[i] = 0;
		for(int i = 1; i <= nn; i++) vec[i].clear();
	}
	return 0;
}
