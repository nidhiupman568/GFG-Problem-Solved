// User function template for C++
class Solution{
    private:
    void solve( vector<string>&ans, string out,vector<vector<int> >m,int x,int y,int n)
    {
        
        if(m[x][y]==0||x<0||x>=n||y<0||y>=n)
        return;
        if(x==n-1&&y==n-1)
        {
            ans.push_back(out);
            return;
        }
       
        if(x>=0 && x<=n-1 && y>=0 && y<n-1 && m[x][y+1]!=0)
       {
           out.push_back('R');
           m[x][y]=0;
           solve(ans,out,m,x,y+1,n);
           out.pop_back();
           m[x][y]=1;
       }
         if(x>=0 && x<n-1 && y>=0 && y<=n-1 && m[x+1][y]!=0)
       {
        
           out.push_back('D');
          m[x][y]=0;
           solve(ans,out,m,x+1,y,n);
         out.pop_back();
           m[x][y]=1;
       }
      if(x>=0 && x<=n-1 && y>0 && y<=n-1 && m[x][y-1]!=0)
       {
           out.push_back('L');
          m[x][y]=0;
           solve(ans,out,m,x,y-1,n);
          out.pop_back();
           m[x][y]=1;
       }
     if(x>0 && x<=n-1 && y>=0 && y<=n-1 && m[x-1][y]!=0)
       {
           out.push_back('U');
           m[x][y]=0;
           solve(ans,out,m,x-1,y,n);
          out.pop_back();
           m[x][y]=1;
       }
    }
    public:
    vector<string> findPath(vector<vector<int> > &m, int n)
    {
        vector<string>ans;
        string out;
        solve(ans,out,m,0,0,n);
        sort(ans.begin(),ans.end());
        return ans;
    }
};

    
