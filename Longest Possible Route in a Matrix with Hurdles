class Solution {
public:
    void dfs(vector<vector<int>> &matrix, int xs, int ys, int xd, int yd,vector<vector<bool>> &vis,int count,int &ans){
        int n= matrix.size();
        int m= matrix[0].size();
        if (xs<0 || ys<0 || xs>=n || ys>=m || vis[xs][ys]==true || matrix[xs][ys]==0) return;
        if(xs==xd && ys==yd){
            ans= max(count, ans);
            return;
        }
        vis[xs][ys]=true;
        dfs(matrix, xs-1, ys, xd, yd, vis, count+1, ans);
        dfs(matrix, xs+1, ys, xd, yd, vis, count+1, ans);
        dfs(matrix, xs, ys-1, xd, yd, vis, count+1, ans);
        dfs(matrix, xs, ys+1, xd, yd, vis, count+1, ans);
        vis[xs][ys]=false;
    }
    int longestPath(vector<vector<int>> matrix, int xs, int ys, int xd, int yd)
    {
        int n= matrix.size();
        int m= matrix[0].size();        
        vector<vector<bool>> vis(n, vector<bool>(m, false));
        int ans=-1;
        int count=0;
        dfs(matrix, xs, ys, xd, yd, vis, count, ans);
        return ans;
    }
};

